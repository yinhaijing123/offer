/*************************************************************************************************************************
问题描述：给定一个二维数组board，代表棋盘，其中元素为1的代表是当前玩家的棋子，0表示没有棋子，-1代表是对方玩家的棋子。
		  当一方棋子在横竖斜方向上有连成排的及获胜（及井字棋规则），返回当前玩家是否胜出。
	      测试样例：[[1,0,1],[1,-1,-1],[1,-1,0]]
		  返回：true
			
思路分析：当前玩家赢的情况(0,0),(1,1),(2,2)为1、或(0,2)(1,1)(2,0)或第一行或第二行或第三行或第一列或第二列或第三列为1.

牛客链接：https://www.nowcoder.com/practice/e1bb714eb9924188a0d5a6df2216a3d1?tpId=8&tqId=11055&rp=1&ru=%2Factivity%2Foj&qru=%2Fta%2Fcracking-the-coding-interview%2Fquestion-ranking&tab=answerKey
**************************************************************************************************************************/
class Board {
public:
    bool checkWon(vector<vector<int> > board) {
        // write code here
        //当前玩家赢的情况(0,0),(1,1),(2,2)为1、或(0,2)(1,1)(2,0)或第一行或第二行或第三行或第一列或第二列或第三列为1.
        if((board[0][0]==1&&board[1][1]==1&&board[2][2]==1)||(board[0][2]==1&&board[1][1]==1&&board[2][0]==1))
            return true;
        for(int i=0;i<3;++i)
        {
            //行
            if(board[i][0]==1&&board[i][1]==1 &&board[i][2]==1)
                return true;
            //列
            if(board[0][i]==1&&board[1][i]==1&&board[2][i]==1)
                return true;
        }
        return false;
    }
};