/*************************************************************************************************************************
问题描述：地下室里放着n种颜色的手套，手套分左右手，但是每种颜色的左右手手套个数不一定相同。A先生现在要出门，所以他要去地下室选手套。但是昏暗的灯光让他无法分辨手套的颜色，只能分辨出左右手。
		  所以他会多拿一些手套，然后选出一双颜色相同的左右手手套。现在的问题是，他至少要拿多少只手套(左手加右手)，才能保证一定能选出一双颜色相同的手套。
		  给定颜色种数n(1≤n≤13),同时给定两个长度为n的数组left,right,分别代表每种颜色左右手手套的数量。数据保证左右的手套总数均不超过26，且一定存在至少一种合法方案。
		  示例：4,[0,7,1,6],[1,5,0,6]
			    返回：10(解释：可以左手手套取2只，右手手套取8只)

			
思路分析：//min（左边和-左边最小的+1，右边和-右边最小的+1）+1；
			1. 对于非0递增序列a1,a2...an，要想最终取值覆盖每一个种类 n =sum(a1...an) -a1 +1（也就是总数减去最小值之后加一）
			2. 所以对于左右手手套颜色都有数量的序列，想要覆盖每一种颜色，则最小数量leftsum = 左边数量和 - 左边最小值 + 1， rightsum =右边数量和 - 右边的最小值 + 1。
			3. 而对于有0存在的，则需要做累加，保证覆盖每一种颜色。

牛客链接：https://www.nowcoder.com/questionTerminal/365d5722fff640a0b6684391153e58d8?toCommentId=126292
**************************************************************************************************************************/
class Gloves {
public:
    int findMinimum(int n, vector<int> left, vector<int> right) {
        //min（左边和-左边最小的+1，右边和-右边最小的+1）+1
        int leftsum=0;
        int rightsum=0;
        int leftmin=INT_MAX;
        int rightmin=INT_MAX;
        int sum=0;
        for(int i=0;i<n;++i)
        {
            if(left[i]*right[i]==0)
                sum+=(left[i]+right[i]);
            else
            {
                leftsum+=left[i];
                rightsum+=right[i];
                leftmin=min(leftmin,left[i]);
                rightmin=min(rightmin,right[i]);
            }
           
        }
        return sum+ min(leftsum-leftmin+1,rightsum-rightmin+1)+1;
    }
};