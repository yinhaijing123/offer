/*************************************************************************************************************************
问题描述：对于一个字符串，请设计一个算法，判断其是否为一个合法的括号串。
		  给定一个字符串A和它的长度n，请返回一个bool值代表它是否为一个合法的括号串。
		  测试样例："(()())",6
		  返回：true
		  测试样例：
		  "()a()()",7
		  返回：false
		  测试样例：
		  "()(()()",7
		  返回：false

思路分析：使用数据结构栈来匹配括号。
		  1.若字符串长度n为奇数则一定不合法；
		  2.遍历字符串A，
		    若遇到非括号的字符，返回false；
		    若遇到左括号则压栈；
			若遇到右括号则出栈一个左括号,直到遍历字符串结束
**************************************************************************************************************************/

class Parenthesis {
public:
    bool chkParenthesis(string A, int n) {
        // write code here
        //1.若n为奇数则一定非法；
        if(n%2!=0)
            return false;
        //使用数据结构栈存储左括号，遍历字符串A，若遇到左括号则压栈，若遇到右括号则出栈一个左括号,直到遍历字符串结束
        //若遇到非括号的字符，返回false；
        stack<int> s;
        for(int i=0;i<n;++i)
        {
            if(A[i]!='('&& A[i]!=')')
                return false;
            else if(A[i]=='(')
                s.push(A[i]);
            else
            {
                if(s.empty())
                    return false;
                s.pop();
            }
        }
        return s.empty();
    }
};