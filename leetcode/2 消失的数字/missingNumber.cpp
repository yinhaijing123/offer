/*************************************************************************************************************************
问题描述：数组nums包含从0到n的所有整数，但其中缺了一个。请编写代码找出那个缺失的整数。你有办法在O(n)时间内完成吗

思路分析：法1：使用空间换时间。
		  ①开辟n+1个数据大小的空间的数组arr（其下标范围为0~n）,给数组初始化为-1；
		  ②遍历nums数组，将0<nums[i]<n，将新数组arr下标为nums[i]处设置为1，表示nums[i]数字存在；
		  ③遍历新数组arr，其值为-1的下标，即表示该值不存在。

		  法2：利用异或操作特性。
		  相同数字异或操作结果为0的特性，将0~n与数组每个元素进行异或操作，结果即为数组中不存在的数字。
**************************************************************************************************************************/

//法1：使用空间换时间。
//①开辟n+1个数据大小的空间的数组arr（其下标范围为0~n）,给数组初始化为-1；
//②遍历nums数组，将0<nums[i]<n，将新数组arr下标为nums[i]处设置为1，表示nums[i]数字存在；
//③遍历新数组arr，其值为-1的下标，即表示该值不存在。
/*int missingNumber(int* nums, int numsSize){
    int size=numsSize+1;
    int* arr=(int *)malloc(sizeof(int)*size);
    for(int i=0;i<size;++i)
    {
        arr[i] = -1;
    }
    for(int i=0;i<numsSize;++i)
    {
        int idx=nums[i];
        arr[idx]=1;
    }

    for(int i=0;i<size;++i)
    {
        if(arr[i]==-1)
            return i;     
    }
    return -1;
}*/

//法2：利用异或操作特性。相同数字异或操作结果为0的特性，将0~n与数组每个元素进行异或操作，结果即为数组中不存在的数字。
int missingNumber(int* nums, int numsSize){
    int ret=0;
    for(int i=0;i<numsSize;i++)
    {
        ret^=i;
        ret^=nums[i];
    }
    ret^=numsSize;
    return ret;
}